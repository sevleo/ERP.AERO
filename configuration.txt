


	GIT

git init
git commit -m "first commit"
git branch -M main
git remote add origin git@github.com:sevleo/project_name.git
git push -u origin main



	NPM and Webpack:
    https://www.theodinproject.com/lessons/node-path-javascript-webpack
    https://webpack.js.org/guides/getting-started/#basic-setup
    https://webpack.js.org/guides/asset-management/#setup
    https://webpack.js.org/guides/output-management/
    https://webpack.js.org/guides/development/


1 run [npm init]
2 run [npm install webpack webpack-cli --save-dev]
3 create src, dist folders
4 create an [index.js] file in src
5 create an [index.html] file in dist
6 link the [main.js] file in a script tag. main.js is the file that will be generated by webpack.
7 in package.json delete line ["main": "index.js"], and add line ["private": true],
8 add a console.log to index.js and test by running ["npx webpack"]
9 create [webpack.config.js]
10 test by running [npx webpack --config webpack.config.js]
11 add line ["build": "webpack"] to scripts in package.json
12 test by running [npm run build]
13 run [npm install --save-dev style-loader css-loader]
14 add following below "output" in webpack.config.js:
    module: {
        rules: [
        {
            test: /\.css$/i,
            use: ['style-loader', 'css-loader'],
        },
        ],
    },
15 add styles.css to src folder
16 add [import './styles.css';] to index.js
17 test by running [npm run build] command
19 add line [clean: true,] to output in webpack.config.js
18 run [npm install --save-dev html-webpack-plugin]
20 add line [const HtmlWebpackPlugin = require('html-webpack-plugin');] to webpack.config.js
21 add following below "module" in webpack.config.js: 
    plugins: [
        new HtmlWebpackPlugin({
            template: './src/index.html',
            filename: 'index.html',
            inject: 'head',
            scriptLoading: 'defer',
        })
    ]
22 move index.html from dist to src folder and remove scrip load
23 run [npm run build] to test
24 add line [mode: 'development',] right before "entry" in webpack.config.js 
25 add line [devtool: 'inline-source-map',] right after "entry" in in webpack.config.js
26 add line ["watch": "webpack --watch",] in package.json scripts
    run [npm run watch] to enable watch
27 run command [npm install --save-dev webpack-dev-server]
28 add following to webpack.config.js right below "devtool"
    devServer: {
        static: './dist',
    },
29 add line ["start": "webpack serve --open",] to package.json scripts
    run [npm start] to enable server

30 add line ["publish": "git subtree push --prefix dist origin gh-pages"] to the scripts for publishing dist folder to gh-pages
31 add following snippet to index.html head:
	<meta name="viewport" content="width=device-width, initial-scale=1">



	ESLINT: 
    https://www.digitalocean.com/community/tutorials/linting-and-formatting-with-eslint-in-vs-code

1 npm install eslint --save-dev
2 ./node_modules/.bin/eslint --init
3 Add following to settings json: (.vscode/settings.json)
    {
    "editor.codeActionsOnSave": {
        "source.fixAll.eslint": true
    },
    "eslint.validate": ["javascript"]
    }
4 npm install --save-dev eslint-config-prettier



	Prettier:

1 npm install --save-dev --save-exact prettier
2 node --eval "fs.writeFileSync('.prettierrc','{}\n')"
3 create .prettierignore and add following into it:
    # Ignore artifacts:
    build
    coverage
4 format all files with prettier: npx prettier . --write
5 add following to the .eslintrc (at the end):
    {
    "extends": [
        "some-other-config-you-use",
        "prettier"
        ]
    }
6 run [npx eslint-config-prettier dist/main.js]



	Jest:

1 npm install --save-dev jest
2 add to packaage.json:
    {
        "scripts": {
            "test": "jest"
        }
    }
3 npm init jest@latest
4 npm install --save-dev babel-jest @babel/core @babel/preset-env
5 create babel.config.js
6 add following to babel.config.js:
    module.exports = {
    presets: [['@babel/preset-env', {targets: {node: 'current'}}]],
    };
7 npm install --save-dev jest jest-watch-typeahead onchange
8 update package json:
"scripts": {
  "test": "jest",
  "test:watch": "onchange '**/*.js' --initial --kill -- npm test -- --watch"
}
9 npm run test:watch



	Vite & React:

npm create vite@latest my-first-react-app -- --template react
npm create vite@latest my-first-react-app -- --template react-ts

npm install --save prop-types
	import PropTypes from 'prop-types';

npm install react-router-dom



	Tailwind

1 npm install -D tailwindcss
2 npx tailwindcss init
3 Add the paths to all of your template files in your tailwind.config.js file:

	/** @type {import('tailwindcss').Config} */
	module.exports = {
  		content: ["index.html", "./src/*.jsx", "./src/**/*.jsx"],
  		theme: {
    		extend: {},
  		},
  		plugins: [],
		}

4 Add the @tailwind directives for each of Tailwind’s layers to your main CSS file:
	@tailwind base;
	@tailwind components;
	@tailwind utilities;

5 npx tailwindcss -i ./src/input.css -o ./src/output.css --watch

6 Add your compiled CSS file to the <head> and start using Tailwind’s utility classes to style your content.
    <!doctype html>
    <html>
    <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="/output.css" rel="stylesheet"> <<-- HERE
    </head>
    <body> 
    <h1 class="text-3xl font-bold underline"> <<-- HERE
        Hello world!
    </h1>
    </body>
    </html>

7 npm install -D prettier prettier-plugin-tailwindcss

8 Then add the file .prettierrc.json:
    {
    "plugins": ["prettier-plugin-tailwindcss"],
    "tabWidth": 2,
    "trailingComma": "es5",
    "semi": false
    }



    Vitest
    https://www.robinwieruch.de/vitest-react-testing-library/
    example of a render test at the end of link
    https://www.theodinproject.com/lessons/node-path-react-new-introduction-to-react-testing

1 npm install vitest --save-dev
2 add line ["test": "vitest",] to the scripts in the package.json
3 create file App.test.jsx with content:
    import { describe, it, expect } from 'vitest';

    describe('something truthy and falsy', () => {
    it('true to be true', () => {
        expect(true).toBe(true);
    });

    it('false to be false', () => {
        expect(false).toBe(false);
    });
    });

4 npm install jsdom --save-dev
5 add following to vite.config.js:
    test: {
    environment: 'jsdom',
    },
6 npm install @testing-library/react @testing-library/jest-dom --save-dev
7 add a test setup file in tests/setup.js and give it the following implementation:
    import { afterEach } from 'vitest';
    import { cleanup } from '@testing-library/react';
    import '@testing-library/jest-dom/vitest';

    // runs a cleanup after each test case (e.g. clearing jsdom)
    afterEach(() => {
    cleanup();
    });
8 include this new test setup file in Vite's configuration file. In addition, 
  make all imports from Vitest global, so that you don't need to perform 
  these imports (e.g. expect) in each file manually anymore:

  test: {
    globals: true,
    environment: 'jsdom',
    setupFiles: './tests/setup.js',
  },

9 npm install @testing-library/user-event --save-dev



	Express
1 express express-locallibrary-tutorial --view=ejs
2 npm install
3 DEBUG=express-locallibrary-tutorial:* npm start
4 update package.json:

  "scripts": {
    "start": "node ./bin/www",
    "devstart": "nodemon ./bin/www",
    "serverstart": "DEBUG=express-locallibrary-tutorial:* npm run devstart"
  },


